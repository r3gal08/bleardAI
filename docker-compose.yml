---

services:
  tsdproxy:
    image: almeidapaulopt/tsdproxy:latest
    container_name: tsdproxy
    #user: 0:0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # This is makes the container able to access the docker daemon itself and run docker commands. IE: You can execute docker command son the host machine.
      - tsdproxydata:/data
    environment:
      # Get AuthKey from your Tailscale account
      - TSDPROXY_AUTHKEY=${TS_AUTH_KEY}
      # Address of docker server (access to example.com ports)
      - TSDPROXY_HOSTNAME=10.42.37.238           # TODO: Might need to adjust this. Perhaps use 127.0.01 if they share a network namespace???
      - DOCKER_HOST=unix:///var/run/docker.sock  # Unix is a form of inter-processor communication. This is the path to the docker unix socket file, which allows the container execute docker commands on the host. This is also possibly not required.....
    restart: unless-stopped

# I think I will need to combine ollama and openwebuis namespaces or create a bridge. Kinda like the idea of combining namesspaces tbh
  ollama:
    devices:
      - /dev/kfd:/dev/kfd
      - /dev/dri:/dev/dri
    volumes:
      - ollama:/root/.ollama
    container_name: ollama
    pull_policy: always
    tty: true
    restart: unless-stopped
    image: ollama/ollama:${OLLAMA_DOCKER_TAG-rocm}
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "ollama"
    environment:
      - 'HSA_OVERRIDE_GFX_VERSION=10.3.0'

  open-webui:
    build:
      context: .
      args:
        OLLAMA_BASE_URL: '/ollama'
      dockerfile: Dockerfile
    image: ghcr.io/open-webui/open-webui:${WEBUI_DOCKER_TAG-main}
    container_name: open-webui
    volumes:
      - open-webui:/app/backend/data
    depends_on:
      - ollama
    environment:
      - 'OLLAMA_BASE_URL=http://ollama:11434' # Due to us combinng the network namespace we can find ollama on localhost. Future versions may want to re-consider how we are running this, previously we used "ollama" as theservice name will automatically default to the dns name within the docker network as well
      - 'WEBUI_SECRET_KEY=' # TODO: Must get this
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "bleardai"
    restart: unless-stopped

  ## PDF
  stirling-pdf:
    image: stirlingtools/stirling-pdf:latest
    labels:
      tsdproxy.enable: "true"
      tsdproxy.name: "pdf"

volumes:
  ollama: {}
  open-webui: {}
  tsdproxydata:
